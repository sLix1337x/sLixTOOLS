name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          npm install --save-dev vite @vitejs/plugin-react typescript @types/node

      - name: Debug Environment
        run: |
          echo "Node version:"
          node -v
          echo "NPM version:"
          npm -v
          echo "Installed packages:"
          npm list --depth=0

      - name: Build
        env:
          NODE_ENV: production
        run: |
          # Build the app with GitHub Pages path
          echo "Building application with base path /sLixTOOLS/..."
          npx vite build --base=/sLixTOOLS/
          
          # Show build output
          echo "Build output:"
          ls -la dist/
          ls -la dist/assets/
          
          # Copy public files
          echo "Copying public files..."
          cp -r public/* dist/ 2>/dev/null || :
          
          # Inject both JS and CSS into index.html
          echo "Modifying index.html to include JS and CSS..."
          
          # Inject CSS first (if any exist)
          echo "Looking for CSS files..."
          CSS_FILES=$(find dist/ -name "*.css" 2>/dev/null || echo "")
          
          if [ -n "$CSS_FILES" ]; then
            echo "CSS files found: $CSS_FILES"
            for CSS_FILE in $CSS_FILES; do
              CSS_PATH=${CSS_FILE#dist/}
              echo "Injecting CSS: $CSS_PATH"
              # Ensure proper path with crossorigin attribute
              sed -i "s|</head>|<link rel=\"stylesheet\" crossorigin href=\"/sLixTOOLS/$CSS_PATH\">\n</head>|g" dist/index.html
            done
          else
            echo "No separate CSS files found. CSS might be inlined or included in JS bundles."
            # Check for malformed CSS file names (no dot before extension)
            MALFORMED_CSS_FILES=$(find dist/ -path "*css" ! -path "*.css" 2>/dev/null || echo "")
            if [ -n "$MALFORMED_CSS_FILES" ]; then
              echo "Possible malformed CSS files found: $MALFORMED_CSS_FILES"
              for CSS_FILE in $MALFORMED_CSS_FILES; do
                # Extract the path and fix the extension if needed
                CSS_PATH=${CSS_FILE#dist/}
                FIXED_PATH=$(echo "$CSS_PATH" | sed -r 's/([^.]+)css$/\1.css/')
                echo "Injecting fixed CSS path: $FIXED_PATH"
                sed -i "s|</head>|<link rel=\"stylesheet\" crossorigin href=\"/sLixTOOLS/$FIXED_PATH\">\n</head>|g" dist/index.html
                # Also rename the actual file if needed
                if [ "$CSS_PATH" != "$FIXED_PATH" ]; then
                  echo "Renaming $CSS_FILE to dist/$FIXED_PATH"
                  mkdir -p "$(dirname "dist/$FIXED_PATH")"
                  cp "$CSS_FILE" "dist/$FIXED_PATH"
                fi
              done
            fi
          fi
          
          # Then inject main JS (search in all of dist directory)
          echo "Looking for JS files..."
          JS_FILES=$(find dist/ -name "*.js" 2>/dev/null || echo "")
          
          if [ -n "$JS_FILES" ]; then
            echo "JS files found: $JS_FILES"
            for JS_FILE in $JS_FILES; do
              # Skip unnecessary files
              if [[ "$JS_FILE" != *polyfills* ]]; then
                JS_PATH=${JS_FILE#dist/}
                echo "Injecting JS: $JS_PATH"
                sed -i "s|</body>|<script type=\"module\" src=\"/sLixTOOLS/$JS_PATH\"></script>\n</body>|g" dist/index.html
              fi
            done
          else
            echo "ERROR: No JS files found in the build output. Something went wrong with the build process."
            exit 1
          fi
          
          # Show modified index.html
          echo "Final index.html content:"
          cat dist/index.html
          
          # Create 404.html for SPA routing
          echo "Creating 404.html for SPA routing..."
          cp dist/index.html dist/404.html
          
          # Show final dist contents
          echo "Final dist contents:"
          find dist -type f | sort
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: skip
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
  
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
